name: Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      contents: write
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install semantic release
        run: pip install python-semantic-release

      - name: Python Semantic Release
        id: semantic
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(python -m semantic_release version)
          echo "VERSION=$VERSION"
          echo "::set-output name=version::$VERSION"
      
      - name: Print captured VERSION
        run: echo "Captured VERSION is $VERSION"

  build:
    needs: versioning
    runs-on: ${{ matrix.os }}
  
    strategy:
      matrix:
        os: [ubuntu-latest]
  
    steps:
      - name: Print VERSION
        run: echo "Version is ${{ needs.versioning.outputs.version }}"
        
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
  
      - name: Install dependencies
        run: |
          sudo apt-get update || true
          sudo apt-get install sqlite3 libsqlite3-dev || true
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Locate Ansible Data Files
        id: locate-ansible
        run: |
          echo "import ansible" > locate_ansible.py
          echo "import os" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'config', 'base.yml'))" >> locate_ansible.py
          BASE_YML=$(python locate_ansible.py | sed -n 1p)
          echo "BASE_YML=$BASE_YML" >> $GITHUB_ENV
          echo "Base YML Path: $BASE_YML"
      
      - name: List Ansible Config Directory
        run: ls -l /opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ansible/config

      - name: Build binary with PyInstaller
        env:
          BASE_YML: ${{ env.BASE_YML }}
        run: |
          pyinstaller --onefile --name linuxwt-${{ needs.versioning.outputs.version }} main.py \
          --add-data "ui:ui" \
          --add-data "ansible_utils:ansible_utils" \
          --add-data "db:db" \
          --add-data "${BASE_YML}:ansible/config" \
          --hidden-import "ui" \
          --hidden-import "ansible_utils" \
          --hidden-import "db" \
          --hidden-import "rich" \
          --hidden-import "sqlite3" \
          --hidden-import "customtkinter" \
          --hidden-import "ansible" \
          --hidden-import "ansible.inventory.manager" \
          --hidden-import "ansible.parsing.dataloader" \
          --hidden-import "ansible.vars.manager" \
          --hidden-import "ansible.playbook.play" \
          --hidden-import "ansible.executor.task_queue_manager" \
          --hidden-import "ansible.module_utils.common.collections" \
          --hidden-import "ansible.utils.display" \
          --hidden-import "ansible.plugins.callback" > build.log 2>&1 || { echo "PyInstaller build failed. Showing build.log:"; cat build.log; exit 1; }
        shell: bash
  
      - name: Print PyInstaller build summary
        run: |
          echo "PyInstaller build completed. Showing last 100 lines of the log:"
          tail -n 100 build.log
        shell: bash
      
      - name: Upload build log
        uses: actions/upload-artifact@v2
        with:
          name: build-log-${{ matrix.os }}
          path: build.log
  
      - name: Upload binary to release
        uses: actions/upload-artifact@v2
        with:
          name: linuxwt-${{ needs.versioning.outputs.version }}
          path: dist/*
  
      - name: List dist directory contents
        run: |
          echo "Contents of dist directory:"
          ls -R dist

  release:
    needs: [build, versioning]
    runs-on: ubuntu-latest
    steps:
      - name: Print VERSION
        run: echo "Version is ${{ needs.versioning.outputs.version }}"
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v2
        with:
          name: linuxwt-${{ needs.versioning.outputs.version }}
          path: linuxwt-ubuntu/dist  # Updated path to match the upload location

      - name: List downloaded Linux artifacts
        run: ls -R linuxwt-ubuntu

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          release_name: Release ${{ needs.versioning.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linuxwt-ubuntu/dist/linuxwt-${{ needs.versioning.outputs.version }}  # Ensure this matches the actual binary name and path
          asset_name: linuxwt-${{ needs.versioning.outputs.version }}-linux
          asset_content_type: application/octet-stream
