name: Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      contents: write
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install semantic release
        run: pip install python-semantic-release

      - name: Python Semantic Release
        id: semantic
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(python -m semantic_release version)
          echo "VERSION=$VERSION"
          echo "::set-output name=version::$VERSION"
      
      - name: Print captured VERSION
        run: echo "Captured VERSION is $VERSION"

  build:
    needs: versioning
    runs-on: ${{ matrix.os }}
  
    strategy:
      matrix:
        os: [ubuntu-latest]
  
    steps:
      - name: Print VERSION
        run: echo "Version is ${{ needs.versioning.outputs.version }}"
        
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
  
      - name: Install dependencies
        run: |
          sudo apt-get update || true
          sudo apt-get install sqlite3 libsqlite3-dev || true
          python -m pip install --upgrade pip
          pip install --user ansible
          pip install --user ansible-base
          pip install --user rich
          pip install --user customtkinter
          pip install --user pyinstaller
          pip install --user ansible-runner

      - name: Locate Ansible Data Files
        id: locate-ansible
        run: |
          echo "import ansible" > locate_ansible.py
          echo "import os" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'config', 'base.yml'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'config', 'ansible_builtin_runtime.yml'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'cache', 'memory.py'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'inventory'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'strategy'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'vars'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'connection'))" >> locate_ansible.py
          echo "print(os.path.join(os.path.dirname(ansible.__file__), 'plugins', 'action'))" >> locate_ansible.py
          BASE_YML=$(python locate_ansible.py | sed -n 1p)
          ANSIBLE_BUILTIN=$(python locate_ansible.py | sed -n 2p)
          CACHE_MEMORY=$(python locate_ansible.py | sed -n 3p)
          INVENTORY_PLUGINS=$(python locate_ansible.py | sed -n 4p)
          STRATEGY_PLUGINS=$(python locate_ansible.py | sed -n 5p)
          VARS_PLUGINS=$(python locate_ansible.py | sed -n 6p)
          CONNECTION_PLUGINS=$(python locate_ansible.py | sed -n 7p)
          ACTION_PLUGINS=$(python locate_ansible.py | sed -n 8p)
          echo "BASE_YML=$BASE_YML" >> $GITHUB_ENV
          echo "ANSIBLE_BUILTIN=$ANSIBLE_BUILTIN" >> $GITHUB_ENV
          echo "CACHE_MEMORY=$CACHE_MEMORY" >> $GITHUB_ENV
          echo "INVENTORY_PLUGINS=$INVENTORY_PLUGINS" >> $GITHUB_ENV
          echo "STRATEGY_PLUGINS=$STRATEGY_PLUGINS" >> $GITHUB_ENV
          echo "VARS_PLUGINS=$VARS_PLUGINS" >> $GITHUB_ENV
          echo "CONNECTION_PLUGINS=$CONNECTION_PLUGINS" >> $GITHUB_ENV
          echo "ACTION_PLUGINS=$ACTION_PLUGINS" >> $GITHUB_ENV
          echo "Base YML Path: $BASE_YML"
          echo "Ansible Builtin Path: $ANSIBLE_BUILTIN"
          echo "Cache Memory Path: $CACHE_MEMORY"
          echo "Inventory Plugins Path: $INVENTORY_PLUGINS"
          echo "Strategy Plugins Path: $STRATEGY_PLUGINS"
          echo "Vars Plugins Path: $VARS_PLUGINS"
          echo "Connection Plugins Path: $CONNECTION_PLUGINS"
          echo "Action Plugins Path: $ACTION_PLUGINS"


      - name: List Site Packages
        run: ls -l /home/runner/.local/lib/python3.9/site-packages

      - name: List Ansible Runner
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible_runner

      - name: List Ansible Config Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible

      - name: List Ansible CLI Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/cli
      
      - name: List Ansible Collections Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/collections
      
      - name: List Ansible Compat Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/compat
      
      - name: List Ansible Config Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/config
      
      - name: List Ansible Executor Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/executor
      
      - name: List Ansible Galaxy Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/galaxy
      
      - name: List Ansible Inventory Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/inventory
      
      - name: List Ansible Module Utils Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/module_utils
      
      - name: List Ansible Modules Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/modules
      
      - name: List Ansible Parsing Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/parsing
      
      - name: List Ansible Playbook Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/playbook
      
      - name: List Ansible Plugins Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/plugins

      - name: List Ansible Plugins Cache Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/plugins/cache
      
      - name: List Ansible Template Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/template
      
      - name: List Ansible Utils Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/utils
      
      - name: List Ansible Vars Directory
        run: ls -l /home/runner/.local/lib/python3.9/site-packages/ansible/vars

      - name: Print environment variables
        run: |
          echo "BASE_YML: ${{ env.BASE_YML }}"
          echo "ANSIBLE_BUILTIN: ${{ env.ANSIBLE_BUILTIN }}"
          echo "CACHE_MEMORY: ${{ env.CACHE_MEMORY }}"
          echo "INVENTORY_PLUGINS: ${{ env.INVENTORY_PLUGINS }}"
          echo "STRATEGY_PLUGINS: ${{ env.STRATEGY_PLUGINS }}"
          echo "VARS_PLUGINS: ${{ env.VARS_PLUGINS }}"
          echo "CONNECTION_PLUGINS: ${{ env.CONNECTION_PLUGINS }}"
          echo "ACTION_PLUGINS: ${{ env.ACTION_PLUGINS }}"
          

      - name: Build binary with PyInstaller
        env:
          BASE_YML: ${{ env.BASE_YML }}
          ANSIBLE_BUILTIN: ${{ env.ANSIBLE_BUILTIN }}
          CACHE_MEMORY: ${{ env.CACHE_MEMORY }}
          INVENTORY_PLUGINS: ${{ env.INVENTORY_PLUGINS }}
          STRATEGY_PLUGINS: ${{ env.STRATEGY_PLUGINS }}
        run: |
          pyinstaller --onefile --name linuxwt-${{ needs.versioning.outputs.version }} main.py \
          --add-data "ui:ui" \
          --add-data "ansible_utils:ansible_utils" \
          --add-data "roles:ansible_utils/roles" \
          --add-data "ansible_utils/roles:ansible_utils/roles" \
          --add-data "db:db" \
          --add-data "${BASE_YML}:ansible/config" \
          --add-data "${ANSIBLE_BUILTIN}:ansible/config" \
          --add-data "${CACHE_MEMORY}:ansible/plugins/cache" \
          --add-data "${INVENTORY_PLUGINS}:ansible/plugins/inventory" \
          --add-data "${STRATEGY_PLUGINS}:ansible/plugins/strategy" \
          --add-data "${VARS_PLUGINS}:ansible/plugins/vars" \
          --add-data "${CONNECTION_PLUGINS}:ansible/plugins/connection" \
          --add-data "${ACTION_PLUGINS}:ansible/plugins/action" \
          --add-data "/home/runner/.local/lib/python3.9/site-packages/ansible_runner:ansible_runner" \
          --hidden-import "ui" \
          --hidden-import "ansible_utils" \
          --hidden-import "db" \
          --hidden-import "rich" \
          --hidden-import "ansible_runner" \
          --hidden-import "sqlite3" \
          --hidden-import "customtkinter" \
          --hidden-import "ansible" \
          --hidden-import "ansible.inventory.manager" \
          --hidden-import "ansible.plugins.cache.memory" \
          --hidden-import "ansible.parsing.dataloader" \
          --hidden-import "ansible.vars.manager" \
          --hidden-import "ansible.playbook.play" \
          --hidden-import "ansible.executor.task_queue_manager" \
          --hidden-import "ansible.module_utils.common.collections" \
          --hidden-import "ansible.utils.display" \
          --hidden-import "ansible.utils.shlex" \
          --hidden-import "ansible.plugins.callback" \
          --hidden-import "ansible.plugins.cache.memory" \
          --hidden-import "ansible.plugins.strategy" \
          --hidden-import "ansible.plugins.action" \
          --hidden-import "ansible.plugins.vars" \
          --hidden-import "ansible.plugins.inventory" > build.log 2>&1 || { echo "PyInstaller build failed. Showing build.log:"; cat build.log; exit 1; }
        shell: bash
  
      - name: Print PyInstaller build summary
        run: |
          echo "PyInstaller build completed. Showing last 100 lines of the log:"
          tail -n 100 build.log
        shell: bash
      
      - name: Upload build log
        uses: actions/upload-artifact@v2
        with:
          name: build-log-${{ matrix.os }}
          path: build.log
  
      - name: Upload binary to release
        uses: actions/upload-artifact@v2
        with:
          name: linuxwt-${{ needs.versioning.outputs.version }}
          path: dist/*
  
      - name: List dist directory contents
        run: |
          echo "Contents of dist directory:"
          ls -R dist

      - name: List All Included Directories
        run: |
          echo "Listing included directories:"
          ls -R roles
          ls -R ansible_utils
          ls -R db
          ls -R ui

  release:
    needs: [build, versioning]
    runs-on: ubuntu-latest
    steps:
      - name: Print VERSION
        run: echo "Version is ${{ needs.versioning.outputs.version }}"
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v2
        with:
          name: linuxwt-${{ needs.versioning.outputs.version }}
          path: linuxwt-ubuntu/dist

      - name: List downloaded Linux artifacts
        run: ls -R linuxwt-ubuntu

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          release_name: Release ${{ needs.versioning.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linuxwt-ubuntu/dist/linuxwt-${{ needs.versioning.outputs.version }}
          asset_name: linuxwt-${{ needs.versioning.outputs.version }}-linux
          asset_content_type: application/octet-stream
